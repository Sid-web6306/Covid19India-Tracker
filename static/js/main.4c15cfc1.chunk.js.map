{"version":3,"sources":["Components/card.js","Components/cardList.js","Components/logo.js","Components/navigation.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","state","noOfCases","cured","deaths","cardList","states","map","i","key","Logo","src","alt","Navigation","onSearch","searchBar","onChange","type","placeholder","App","onSearchBarHandler","event","setState","target","value","fetch","then","response","json","this","filteredStates","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oPAgBeA,EAdF,SAACC,GACV,OAEI,yBAAKC,UAAU,oDACX,0CAAgBD,EAAME,OACtB,6BACI,0CAAgBF,EAAMG,WACtB,oDAA0BH,EAAMI,OAChC,2CAAiBJ,EAAMK,WCaxBC,EAnBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,6BACIA,EAAOC,KAAI,SAACN,EAAMO,GACd,OACI,kBAAC,EAAD,CACIC,IAAMD,EACNP,MAAOK,EAAOE,GAAGP,MACjBE,MAAQG,EAAOE,GAAGL,MAClBC,OAAUE,EAAOE,GAAGJ,OACpBF,UAAaI,EAAOE,GAAGN,iBCFhCQ,EAVF,WACT,OACI,yBAAKV,UAAU,YACX,yBAAKW,IAAI,qIAAqIC,IAAI,YCO/IC,EAVI,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SAAuB,EAAdC,UAC1B,OACI,yBAAKf,UAAU,wBACX,kBAAC,EAAD,MACA,wBAAIA,UAAW,MAAf,yBACA,2BAAOgB,SAAUF,EAAUd,UAAU,aAAaiB,KAAO,SAASC,YAAY,mBCkC3EC,G,wDAlCb,aAAc,IAAD,8BACX,gBAaFC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAACP,UAAUM,EAAME,OAAOC,SAbtC,EAAKvB,MAAM,CACTK,OAAO,GACPS,UAAU,IAJD,E,gEAOO,IAAD,OACjBU,MAAM,kDACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAApB,GAAM,OAAI,EAAKgB,SAAS,CAAChB,OAAOA,S,+BAQ/B,IAAD,EACmBuB,KAAK5B,MAAvBK,EADD,EACCA,OAAOS,EADR,EACQA,UACRe,EAAgBxB,EAAOyB,QAAO,SAAA9B,GAClC,OAAOA,EAAMA,MAAM+B,cAAcC,SAASlB,EAAUiB,kBAEtD,OACE,6BACE,kBAAC,EAAD,CAAYlB,SAAYe,KAAKT,qBAC7B,yBAAKpB,UAAU,MACb,kBAAC,EAAD,CAAUM,OAAQwB,U,GA5BVI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4c15cfc1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props)=>{\r\n    return (\r\n        \r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <h3>State Name:{props.state}</h3>\r\n            <div>\r\n                <p>Total Cases:{props.noOfCases}</p>\r\n                <p>Total Recovered Cases:{props.cured}</p>\r\n                <p>Total Death: {props.deaths}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './card';\r\n\r\n\r\nconst cardList = ({states}) =>{\r\n    return (\r\n        <div>{\r\n            states.map((state,i)=>{\r\n                return (\r\n                    <Card\r\n                        key ={i}\r\n                        state={states[i].state}\r\n                        cured ={states[i].cured}\r\n                        deaths = {states[i].deaths}\r\n                        noOfCases = {states[i].noOfCases}\r\n                    />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default cardList;","import React from 'react';\r\n\r\nconst Logo = () =>{\r\n    return(\r\n        <div className='w3 black'>\r\n            <img src=\"https://images.unsplash.com/photo-1546833998-07256bcc76ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" alt=\"India\" />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Logo;","import React from 'react';\r\nimport Logo from './logo';\r\nconst Navigation = ({onSearch,searchBar}) =>{\r\n    return(\r\n        <div className='flex justify-between'>\r\n            <Logo />\r\n            <h2 className ='tc'>Covid19-India Tracker</h2>\r\n            <input onChange={onSearch} className=\"h2 w50 pa2\" type = \"search\" placeholder=\"Search state\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React,{Component} from 'react';\nimport CardList from './Components/cardList';\n\nimport Navigation from './Components/navigation';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state={\n      states:[],\n      searchBar:''\n    }\n  }\n  componentDidMount(){\n    fetch('https://covid-india-cases.herokuapp.com/states')\n    .then(response=>response.json())\n    .then(states => this.setState({states:states}));\n  }\n\n\n  onSearchBarHandler = (event)=>{\n    this.setState({searchBar:event.target.value})\n  }\n  \n  render(){\n    const {states,searchBar}=this.state;\n    const filteredStates= states.filter(state=>{\n      return state.state.toLowerCase().includes(searchBar.toLowerCase());\n    })\n    return (\n      <div>\n        <Navigation onSearch = {this.onSearchBarHandler}/>\n        <div className='tc'>\n          <CardList states={filteredStates}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}